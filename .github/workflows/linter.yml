#name: Pylint Odoo

on:
  push:
      branches:
        - main
        - "18"
  workflow_dispatch:
jobs:
#  Builds:
#    runs-on: self-hosted
#    steps:
#      - uses: actions/checkout@v4
#      # Setup python #
#      - name: Set Up Python 3.11
#        uses: actions/setup-python@v5
#        with:
#          python-version: 3.11
          
#      - name: Install pre-commit-vauxoo
#        run: pip install pre-commit-vauxoo

#      - name: Run pre-commit-vauxoo checks
#        run: pre-commit-vauxoo -t all # Or specify your desired pre-commit-vauxoo arguments
            
#      - name: Listar directorios
#        run: ls -l

#      - name: Version SO
#        run: cat /etc/os-releasebuild-and-push

  build-and-push:
    runs-on: self-hosted
    continue-on-error: true
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Iniciar sesión en Docker Hub
        uses: docker/login-action@v3
        with:
          username: "jruvalcaba@nubuserp.com"
          password: "dckr_pat_UG69kz0EwfryzQjkltGpOfGC3fQ"

      - name: Construir y empujar la imagen
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: jruvalcabaluna/odoo:latest # Reemplaza con tus datos

      - name: Stop all docker instances
        run: docker stop $(docker ps -aq)

      - name: Remove all containers
        run: docker rm $(docker ps -a -q)

      - name: Remove all images
        run: docker rmi $(docker images -a -q) --force
        
      - name: Pull Docker Image
        run: docker pull jruvalcabaluna/odoo:latest

      - name: Start Postgresql
        run: docker run -d -e POSTGRES_USER=odoo -e POSTGRES_PASSWORD=odoo -e POSTGRES_DB=postgres --name db postgres:15

      - name: Start Odoo Instance
        run: docker run -d -p 8069:8069 -v ./config:/etc/odoo --name odoo --link db:db -t odoo

      - name: Unzip Database
        #env:
        #  ODOO_MASTER_PASSWORD: "admin" # Store securely as a secret
        run: unzip ./odoo.zip -d /tmp/odoo_restore

      - name: Change to postgres user
        run: sudo su postgres

      - name: Create black database
        run: createdb -O odoo odoo

      - name: Restore DB
        run: psql -d odoo -f /tmp/odoo_restore/dump.sql

      - name: Exit
        run: exit
              # Example for using pg_restore for a custom pg_dump:
              # pg_restore -d ${{ github.event.inputs.db_name }} -U odoo -h <DB_HOST> -p 5432 ${{ github.event.inputs.backup_file_path }}
              # Example using click-odoo-restoredb (if installed):
              # click-odoo-restoredb -c <path_to_odoo_config> ${{ github.event.inputs.db_name }} ${{ github.event.inputs.backup_file_path }} --force --copy
              #echo "Execute your Odoo database restoration command here."
              # Replace with your actual restore command based on your setup

  #deploy:
  #  needs: build-and-push # Este job depende del anterior
  #  runs-on: ubuntu-lastest
  #  steps:
  #    - name: Desplegar en Azure App Service
  #      uses: azure/webapps-deploy@v2
  #      with:
  #        app-name: tu-nombre-de-app-azure # Reemplaza con el nombre de tu App Service
  #        slot-name: production # O el nombre de tu slot de despliegue
  #        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
  #        images: tu-usuario/tu-imagen:latest

# .github/workflows/odoo-ci.yml
#name: Odoo CI

#on:
#  push:
#    branches:
#      - main
#  pull_request:
#    branches:
#      - main

#jobs:
#  build-and-run-odoo:
#    runs-on: self-hosted
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4

#      - name: Build and run Odoo with Docker Compose
#        run: docker-compose up -d --build

#      - name: Wait for Odoo to start (optional)
#        run: sleep 300 # Adjust as needed for Odoo to fully initialize

#      - name: Run Odoo Tests (optional)
        # Example: Replace with your actual Odoo test command
#        run: docker exec odoo-main odoo --test-enable -d odoo_db 
# --addons-path=/mnt/extra-addons --stop-after-init
#      - name: Stop and clean up containers
#        if: always() # Ensure this step runs even if previous steps fail
#        run: docker-compose down
